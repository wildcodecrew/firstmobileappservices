{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/stack/src/views/Stack/CardContainer.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n      cardOverlayEnabled = _ref.cardOverlayEnabled,\n      cardShadowEnabled = _ref.cardShadowEnabled,\n      cardStyle = _ref.cardStyle,\n      cardStyleInterpolator = _ref.cardStyleInterpolator,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      gestureDirection = _ref.gestureDirection,\n      gestureEnabled = _ref.gestureEnabled,\n      gestureResponseDistance = _ref.gestureResponseDistance,\n      gestureVelocityImpact = _ref.gestureVelocityImpact,\n      getPreviousRoute = _ref.getPreviousRoute,\n      getFocusedRoute = _ref.getFocusedRoute,\n      headerMode = _ref.headerMode,\n      headerShown = _ref.headerShown,\n      headerStyleInterpolator = _ref.headerStyleInterpolator,\n      headerTransparent = _ref.headerTransparent,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      index = _ref.index,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onPageChangeCancel = _ref.onPageChangeCancel,\n      onPageChangeConfirm = _ref.onPageChangeConfirm,\n      onPageChangeStart = _ref.onPageChangeStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      previousScene = _ref.previousScene,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene,\n      transitionSpec = _ref.transitionSpec;\n  React.useEffect(function () {\n    onPageChangeConfirm == null ? void 0 : onPageChangeConfirm();\n  }, [active, onPageChangeConfirm]);\n\n  var handleOpen = function handleOpen() {\n    onTransitionEnd == null ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    onTransitionEnd == null ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n\n  var handleTransitionStart = function handleTransitionStart(_ref2) {\n    var closing = _ref2.closing;\n\n    if (active && closing) {\n      onPageChangeConfirm == null ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel == null ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart == null ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next;\n\n    var listener = (_scene$progress$next = scene.progress.next) == null ? void 0 : _scene$progress$next.addListener == null ? void 0 : _scene$progress$next.addListener(function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2;\n\n        (_scene$progress$next2 = scene.progress.next) == null ? void 0 : _scene$progress$next2.removeListener == null ? void 0 : _scene$progress$next2.removeListener(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: onPageChangeStart,\n    onGestureCanceled: onPageChangeCancel,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    containerStyle: headerMode === 'float' && !headerTransparent && headerShown !== false ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    }\n  }, React.createElement(View, {\n    style: styles.scene,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    }\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    }\n  }, renderScene({\n    route: scene.route\n  }))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousRoute: getPreviousRoute,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","active","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousRoute","getFocusedRoute","headerMode","headerShown","headerStyleInterpolator","headerTransparent","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onTransitionEnd","onTransitionStart","previousScene","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","React","handleOpen","route","handleClose","handleTransitionStart","insets","top","right","bottom","left","colors","useTheme","pointerEvents","setPointerEvents","listener","value","marginTop","backgroundColor","StyleSheet","styles","mode","scenes","styleInterpolator","onContentHeightChange","container","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport { Scene, Layout, StackHeaderMode, TransitionPreset } from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  previousScene?: Scene<Route<string>>;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  headerMode: StackHeaderMode;\n  headerShown?: boolean;\n  headerTransparent?: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousRoute,\n  getFocusedRoute,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  headerTransparent,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onTransitionEnd,\n  onTransitionStart,\n  previousScene,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // `addListener` may not exist on web and older versions of React Native\n    // @ts-ignore\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-ignore\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={onPageChangeStart}\n      onGestureCanceled={onPageChangeCancel}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      containerStyle={\n        headerMode === 'float' && !headerTransparent && headerShown !== false\n          ? { marginTop: headerHeight }\n          : null\n      }\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <HeaderHeightContext.Provider value={headerHeight}>\n            {renderScene({ route: scene.route })}\n          </HeaderHeightContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousRoute,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}