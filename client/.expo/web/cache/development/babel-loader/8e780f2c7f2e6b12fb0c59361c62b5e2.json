{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/stack/src/views/Header/HeaderContainer.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContext } from '@react-navigation/native';\nimport Header from \"./Header\";\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n      scenes = _ref.scenes,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      getFocusedRoute = _ref.getFocusedRoute,\n      getPreviousRoute = _ref.getPreviousRoute,\n      onContentHeightChange = _ref.onContentHeightChange,\n      gestureDirection = _ref.gestureDirection,\n      styleInterpolator = _ref.styleInterpolator,\n      style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  return React.createElement(View, {\n    pointerEvents: \"box-none\",\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    }\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    var options = scene.descriptor.options;\n    var isFocused = focusedRoute.key === scene.route.key;\n    var previousRoute = getPreviousRoute({\n      route: scene.route\n    });\n    var previous;\n\n    if (previousRoute) {\n      for (var j = i - 1; j >= 0; j--) {\n        var s = self[j];\n\n        if (s && s.route.key === previousRoute.key) {\n          previous = s;\n          break;\n        }\n      }\n    }\n\n    var previousScene = self[i - 1];\n    var nextScene = self[i + 1];\n    var isHeaderStatic = previousScene && previousScene.descriptor.options.headerShown === false && !nextScene || nextScene && nextScene.descriptor.options.headerShown === false;\n    var props = {\n      mode: mode,\n      layout: layout,\n      insets: insets,\n      scene: scene,\n      previous: previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      }\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        return onContentHeightChange({\n          route: scene.route,\n          height: e.nativeEvent.layout.height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' || options.headerTransparent ? styles.header : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      }\n    }, options.headerShown !== false ? options.header !== undefined ? options.header(props) : React.createElement(Header, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      }\n    })) : null));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["mode","scenes","layout","insets","getFocusedRoute","getPreviousRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","i","self","options","scene","isFocused","previousRoute","route","j","s","previous","previousScene","nextScene","isHeaderStatic","props","navigation","height","e","styles","StyleSheet","header","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getFocusedRoute,\n  getPreviousRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { options } = scene.descriptor;\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n        const isHeaderStatic =\n          (previousScene &&\n            previousScene.descriptor.options.headerShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          (nextScene && nextScene.descriptor.options.headerShown === false);\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <View\n              onLayout={\n                onContentHeightChange\n                  ? e =>\n                      onContentHeightChange({\n                        route: scene.route,\n                        height: e.nativeEvent.layout.height,\n                      })\n                  : undefined\n              }\n              pointerEvents={isFocused ? 'box-none' : 'none'}\n              accessibilityElementsHidden={!isFocused}\n              importantForAccessibility={\n                isFocused ? 'auto' : 'no-hide-descendants'\n              }\n              style={\n                mode === 'float' || options.headerTransparent\n                  ? styles.header\n                  : null\n              }\n            >\n              {options.headerShown !== false ? (\n                options.header !== undefined ? (\n                  options.header(props)\n                ) : (\n                  <Header {...props} />\n                )\n              ) : null}\n            </View>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}