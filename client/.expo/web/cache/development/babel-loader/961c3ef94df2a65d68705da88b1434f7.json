{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/stack/src/navigators/createStackNavigator.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useNavigationBuilder, createNavigatorFactory } from '@react-navigation/native';\nimport { StackRouter, StackActions } from '@react-navigation/routers';\nimport StackView from \"../views/Stack/StackView\";\n\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenOptions: screenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    return navigation.addListener && navigation.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread({}, StackActions.popToTop(), {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    }\n  }));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["initialRouteName","children","screenOptions","rest","state","descriptors","navigation","useNavigationBuilder","React","isFocused","requestAnimationFrame","e","StackActions","target","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,oBAAA,EAAA,sBAAA,QAAA,0BAAA;AAMA,SAAA,WAAA,EAAA,YAAA,QAAA,2BAAA;AAMA,OAAA,SAAA;;AAWA,SAAA,cAAA,CAAA,IAAA,EAKU;AAJRA,MAAAA,gBAIQ,GAAA,IAAA,CAJRA,gBAAAA;AAAAA,MACAC,QAGQ,GAAA,IAAA,CAHRA,QADAD;AAAAA,MAEAE,aAEQ,GAAA,IAAA,CAFRA,aAFAF;AAAAA,MAGGG,IACK,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,kBAAA,EAAA,UAAA,EAAA,eAAA,CAAA,CAJRH;;AAIQ,MAAA,qBAAA,GACmCO,oBAAoB,CAAA,WAAA,EAKhD;AACbP,IAAAA,gBAAgB,EADH,gBAAA;AAEbC,IAAAA,QAAQ,EAFK,QAAA;AAGbC,IAAAA,aAAa,EATP;AAMO,GALgD,CADvD;AAAA,MACAE,KADA,GAAA,qBAAA,CAAA,KAAA;AAAA,MACOC,WADP,GAAA,qBAAA,CAAA,WAAA;AAAA,MACoBC,UADpB,GAAA,qBAAA,CAAA,UAAA;;AAYRE,EAAAA,KAAK,CAALA,SAAAA,CACE,YAAA;AAAA,WACEF,UAAU,CAAVA,WAAAA,IACAA,UAAU,CAAVA,WAAAA,CAAAA,UAAAA,EAAmC,UAAA,CAAA,EAAK;AACtC,UAAMG,SAAS,GAAGH,UAAU,CAA5B,SAAkBA,EAAlB;AAIAI,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEN,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEO,CAAD,CAHH,gBAAA,EAIE;AAGAL,UAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKM,YAAY,CADjBN,QACKM,EADLN,EAAAA;AAEEO,YAAAA,MAAM,EAAET,KAAK,CAFfE;AAAAA,WAAAA,CAAAA;AAKH;AAbDI,OAAqB,CAArBA;AAPJ,KAEEJ,CAFF;AADFE,GAAAA,EAuBE,CAAA,UAAA,EAAaJ,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAvBjCI,GAuBE,CAvBFA;AA0BA,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,UAAU,EAJZ,UAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AAUF;;AAAA,eAAeM,sBAAsB,CAArC,cAAqC,CAArC","sourcesContent":["import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n} from '@react-navigation/native';\nimport {\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/routers';\nimport StackView from '../views/Stack/StackView';\nimport {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', e => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationOptions,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}