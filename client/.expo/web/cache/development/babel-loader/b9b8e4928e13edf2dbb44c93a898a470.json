{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/stack/src/views/Stack/StackView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { StackActions } from '@react-navigation/routers';\nimport CardStack from \"./CardStack\";\nimport KeyboardManager from \"../KeyboardManager\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport SafeAreaProviderCompat from \"../SafeAreaProviderCompat\";\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  function StackView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    };\n\n    _this.getGesturesEnabled = function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n\n      if (descriptor) {\n        var _descriptor$options = descriptor.options,\n            gestureEnabled = _descriptor$options.gestureEnabled,\n            animationEnabled = _descriptor$options.animationEnabled;\n\n        if (animationEnabled === false) {\n          return false;\n        }\n\n        return gestureEnabled !== undefined ? gestureEnabled : Platform.OS !== 'android';\n      }\n\n      return false;\n    };\n\n    _this.getPreviousRoute = function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    };\n\n    _this.renderScene = function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      return descriptor.render();\n    };\n\n    _this.renderHeader = function (props) {\n      return React.createElement(HeaderContainer, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        }\n      }));\n    };\n\n    _this.handleOpenRoute = function (_ref4) {\n      var route = _ref4.route;\n\n      _this.setState(function (state) {\n        return {\n          routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n            return !state.replacingRouteKeys.includes(r.key);\n          }) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n            return key !== route.key;\n          }),\n          closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n            return key !== route.key;\n          }),\n          replacingRouteKeys: []\n        };\n      });\n    };\n\n    _this.handleCloseRoute = function (_ref5) {\n      var route = _ref5.route;\n      var _this$props = _this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n\n      if (state.routes.find(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread({}, StackActions.pop(), {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    };\n\n    _this.handleTransitionStart = function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n\n    _this.handleTransitionEnd = function (_ref7, closing) {\n      var route = _ref7.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation,\n          keyboardHandlingEnabled = _this$props2.keyboardHandlingEnabled,\n          _this$props2$mode = _this$props2.mode,\n          mode = _this$props2$mode === void 0 ? 'card' : _this$props2$mode,\n          rest = _objectWithoutProperties(_this$props2, [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\"]);\n\n      var _this$state2 = this.state,\n          routes = _this$state2.routes,\n          descriptors = _this$state2.descriptors,\n          openingRouteKeys = _this$state2.openingRouteKeys,\n          closingRouteKeys = _this$state2.closingRouteKeys;\n      var headerMode = mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n      return React.createElement(GestureHandlerWrapper, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        }\n      }, React.createElement(SafeAreaProviderCompat, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        }\n      }, React.createElement(SafeAreaConsumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        }\n      }, function (insets) {\n        return React.createElement(KeyboardManager, {\n          enabled: keyboardHandlingEnabled !== false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379\n          }\n        }, function (props) {\n          return React.createElement(CardStack, _extends({\n            mode: mode,\n            insets: insets,\n            getPreviousRoute: _this2.getPreviousRoute,\n            getGesturesEnabled: _this2.getGesturesEnabled,\n            routes: routes,\n            openingRouteKeys: openingRouteKeys,\n            closingRouteKeys: closingRouteKeys,\n            onOpenRoute: _this2.handleOpenRoute,\n            onCloseRoute: _this2.handleCloseRoute,\n            onTransitionStart: _this2.handleTransitionStart,\n            onTransitionEnd: _this2.handleTransitionEnd,\n            renderHeader: _this2.renderHeader,\n            renderScene: _this2.renderScene,\n            headerMode: headerMode,\n            state: state,\n            descriptors: descriptors\n          }, rest, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 381\n            }\n          }));\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.state.routes === state.previousRoutes && state.routes.length) {\n        if (props.descriptors !== state.previousDescriptors) {\n          var _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n\n          return {\n            previousDescriptors: props.descriptors,\n            descriptors: _descriptors\n          };\n        }\n\n        return null;\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) != null ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.find(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.find(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.find(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes;\n\n        routes = routes.slice();\n\n        (_routes = routes).splice.apply(_routes, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref8) {\n          var key = _ref8.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","StackView","React","Component","props","state","descriptors","acc","route","previousDescriptors","routes","openingRouteKeys","closingRouteKeys","replacingRouteKeys","previousRoutes","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","getAnimationTypeForReplace","r","key","getGesturesEnabled","gestureEnabled","animationEnabled","Platform","getPreviousRoute","index","renderScene","renderHeader","handleOpenRoute","handleCloseRoute","navigation","StackActions","source","target","handleTransitionStart","type","data","closing","handleTransitionEnd","keyboardHandlingEnabled","mode","rest","headerMode","styles","StyleSheet","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { Route } from '@react-navigation/native';\nimport { StackActions, StackNavigationState } from '@react-navigation/routers';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (props.state.routes === state.previousRoutes && state.routes.length) {\n      if (props.descriptors !== state.previousDescriptors) {\n        const descriptors = state.routes.reduce<StackDescriptorMap>(\n          (acc, route) => {\n            acc[route.key] =\n              props.descriptors[route.key] || state.descriptors[route.key];\n\n            return acc;\n          },\n          {}\n        );\n\n        return {\n          previousDescriptors: props.descriptors,\n          descriptors,\n        };\n      }\n\n      return null;\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                key => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                key => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      r =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex(r => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.setState(state => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find(r => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState(state => ({\n        routes: state.routes.filter(r => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          key => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          key => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaConsumer>\n            {insets => (\n              <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                {props => (\n                  <CardStack\n                    mode={mode}\n                    insets={insets as EdgeInsets}\n                    getPreviousRoute={this.getPreviousRoute}\n                    getGesturesEnabled={this.getGesturesEnabled}\n                    routes={routes}\n                    openingRouteKeys={openingRouteKeys}\n                    closingRouteKeys={closingRouteKeys}\n                    onOpenRoute={this.handleOpenRoute}\n                    onCloseRoute={this.handleCloseRoute}\n                    onTransitionStart={this.handleTransitionStart}\n                    onTransitionEnd={this.handleTransitionEnd}\n                    renderHeader={this.renderHeader}\n                    renderScene={this.renderScene}\n                    headerMode={headerMode}\n                    state={state}\n                    descriptors={descriptors}\n                    {...rest}\n                    {...props}\n                  />\n                )}\n              </KeyboardManager>\n            )}\n          </SafeAreaConsumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}